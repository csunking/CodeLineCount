#coding=utf-8
#iplaypython.py
import sys;
import os;

# from distutils.core import setup
# import py2exe

# D:\我的资料\ZJECMS
# - D:\我的资料\ZJECMS\DBFSR\Libs
# D:\我的资料\ZJECMS_SSA
# F:\Learnings\Projects\ZJECMS_SM
# F:\Learnings\Projects\DWG_VISUAL\DBFSR



# http://www.iplaypython.com/code/c137.html
# weng, 2016-11-29 2040



 
class LineCount:

    def trim(self,docstring):
        if not docstring:
            return ''
        lines = docstring.expandtabs().splitlines()
         
        indent = sys.maxint
        for line in lines[1:]:
            stripped = line.lstrip()
            if stripped:
                indent = min(indent, len(line) - len(stripped))
         
        trimmed = [lines[0].strip()]
        if indent < sys.maxint:
            for line in lines[1:]:
                trimmed.append(line[indent:].rstrip())
         
        while trimmed and not trimmed[-1]:
            trimmed.pop()
        while trimmed and not trimmed[0]:
            trimmed.pop(0)
         
        return '\n'.join(trimmed)
     

    # 对一个文件的行数进行统计
    def FileLineCount(self,filename):
        (filepath,tempfilename) = os.path.split(filename)
        (shotname,extension) = os.path.splitext(tempfilename)
        if extension == '.cs' or extension == '.cpp' or  extension == '.h' or  extension == '.py' : # file type 
            
            # 去除designer的影响
            if 'Designer.cs' in tempfilename:
                return
            
            file = open(filename,'r')
            self.sourceFileCount += 1
            allLines = file.readlines()
            file.close()
             
            lineCount    = 0
            commentCount = 0
            blankCount   = 0
            bracketCount = 0
            codeCount    = 0
            
            for eachLine in allLines:
                lineCount = lineCount + 1
                if eachLine != " " :
                    eachLine = eachLine.replace(" ","") #remove space
                    eachLine = self.trim(eachLine)      #remove tabIndent
                    if  eachLine.find('//') == 0 :       #LINECOMMENT 
                        commentCount += 1;
                    else :
                        if eachLine == "":
                            blankCount += 1;
                        #elif eachLine == "{" or eachLine == "}" :
                            #bracketCount += 1;
                        else :
                            codeCount += 1;
                
            
            self.all += lineCount;
            self.allComment += commentCount;
            self.allBlank += blankCount;
            self.bracketCount += bracketCount;
            self.allSource += codeCount;
            self.PrintFilesPathRelative(filename);

            # print filename;
            # print '           Total      :',lineCount ;
            # print '           Comment    :',commentCount;
            # print '           Blank      :',blankCount;
            # print '           Source     :',codeCount;

    # 输出文件或文件夹的路径
    def PrintFilesPathRelative(self,filename):
        relatative_fullPath = '.\\' +  filename[self.nPos:]
        print(relatative_fullPath)
    

    # 调用的计算主函数              
    def CalulateCodeCount(self,filename):
        if os.path.isdir(filename) :
            if not filename.endswith('\\'):
                filename += '\\'; 
            for file in os.listdir(filename):
                file_path = filename + file
                if os.path.isdir(file_path):
                    if "Debug" in file_path \
                      or 'BaseCommon' in file_path or 'DataOperate' in file_path:
                        continue
                    #if "nplot" in file_path: # and  ~ ('NControl' in file_path)
                    #    continue
                    
                    self.PrintFilesPathRelative(file_path);
                    self.CalulateCodeCount(file_path);
                else:
                    
                    self.FileLineCount(file_path);
        else:
            self.FileLineCount(filename);
 

    # Open File
    def __init__(self):
        self.all = 0;
        self.allComment =0;
        self.allBlank = 0;
        self.bracketCount = 0;
        self.allSource = 0;
        self.sourceFileCount = 0;

        self.filename = raw_input('Enter file name: ');
        nPos = len(self.filename);
        if self.filename.endswith('\\'):
            nPos -=1
        nPos +=1
        self.nPos = nPos
        
        self.CalulateCodeCount(self.filename);
        
        if self.sourceFileCount == 0 :
            print 'No Code Files';
            pass;
        print '\n';
        print '*****************  All Files  **********************';
        print '    Code Dir   :',self.filename;
        print '    Files      :',self.sourceFileCount;
        print '    Total      :',self.all;
        print '    Comment    :',self.allComment;
        print '    Blank      :',self.allBlank;
        #print '    Bracket    :',self.bracketCount;
        print '    Source     :',self.allSource;
        print '\n    Code Rato  :%6.2f%%'%(float(self.allSource)/self.all*100);
        print '****************************************************';
 
 
# setup( 
  
#     version = "0.0.1", 
#     description = "LineCount", 
#     name = "LineCount", 
  
#     console = ["LineCount.py"], 
#     ) 

# myLineCount = LineCount();

myLineCount = LineCount();
# D:\我的资料\Projects\ZJECMS_DBFSR\DBFSR
# D:\我的资料\Projects\ZJECMS_DBFSR
# D:\最近下载\Source Code\TEST_CHART_And_DWG\Good code\nplot-0.9.10.0_(improvement A++)\nplot
